/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "./common";

export declare namespace CommitRevealElection {
  export type CandidateStruct = {
    id: BigNumberish;
    name: string;
    voteCount: BigNumberish;
  };

  export type CandidateStructOutput = [
    id: bigint,
    name: string,
    voteCount: bigint
  ] & { id: bigint; name: string; voteCount: bigint };
}

export interface CommitRevealElectionInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "addCandidate"
      | "admin"
      | "advanceStage"
      | "candidateCount"
      | "candidates"
      | "commitVote"
      | "commits"
      | "currentStage"
      | "generateCommitHash"
      | "getAllCandidates"
      | "getCandidate"
      | "getElectionStats"
      | "getVoterCommit"
      | "getWinner"
      | "hasVoterCommitted"
      | "hasVoterRevealed"
      | "isVoterRegistered"
      | "registerMultipleVoters"
      | "registerVoter"
      | "registeredVoters"
      | "resetElection"
      | "revealVote"
      | "totalCommits"
      | "totalRevealed"
      | "voterCount"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "CandidateAdded"
      | "StageChanged"
      | "VoteCommitted"
      | "VoteRevealed"
      | "VoterRegistered"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "addCandidate",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "admin", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "advanceStage",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "candidateCount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "candidates",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "commitVote",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "commits",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "currentStage",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "generateCommitHash",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getAllCandidates",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getCandidate",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getElectionStats",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getVoterCommit",
    values: [AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "getWinner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "hasVoterCommitted",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "hasVoterRevealed",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "isVoterRegistered",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "registerMultipleVoters",
    values: [AddressLike[]]
  ): string;
  encodeFunctionData(
    functionFragment: "registerVoter",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "registeredVoters",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "resetElection",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "revealVote",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "totalCommits",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "totalRevealed",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "voterCount",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "addCandidate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "admin", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "advanceStage",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "candidateCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "candidates", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "commitVote", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "commits", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "currentStage",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "generateCommitHash",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAllCandidates",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCandidate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getElectionStats",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getVoterCommit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getWinner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "hasVoterCommitted",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "hasVoterRevealed",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isVoterRegistered",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "registerMultipleVoters",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "registerVoter",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "registeredVoters",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "resetElection",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "revealVote", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "totalCommits",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalRevealed",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "voterCount", data: BytesLike): Result;
}

export namespace CandidateAddedEvent {
  export type InputTuple = [candidateId: BigNumberish, name: string];
  export type OutputTuple = [candidateId: bigint, name: string];
  export interface OutputObject {
    candidateId: bigint;
    name: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace StageChangedEvent {
  export type InputTuple = [newStage: BigNumberish];
  export type OutputTuple = [newStage: bigint];
  export interface OutputObject {
    newStage: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace VoteCommittedEvent {
  export type InputTuple = [voter: AddressLike, commitHash: BytesLike];
  export type OutputTuple = [voter: string, commitHash: string];
  export interface OutputObject {
    voter: string;
    commitHash: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace VoteRevealedEvent {
  export type InputTuple = [voter: AddressLike, candidateId: BigNumberish];
  export type OutputTuple = [voter: string, candidateId: bigint];
  export interface OutputObject {
    voter: string;
    candidateId: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace VoterRegisteredEvent {
  export type InputTuple = [voter: AddressLike];
  export type OutputTuple = [voter: string];
  export interface OutputObject {
    voter: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface CommitRevealElection extends BaseContract {
  connect(runner?: ContractRunner | null): CommitRevealElection;
  waitForDeployment(): Promise<this>;

  interface: CommitRevealElectionInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  addCandidate: TypedContractMethod<[_name: string], [void], "nonpayable">;

  admin: TypedContractMethod<[], [string], "view">;

  advanceStage: TypedContractMethod<[], [void], "nonpayable">;

  candidateCount: TypedContractMethod<[], [bigint], "view">;

  candidates: TypedContractMethod<
    [arg0: BigNumberish],
    [
      [bigint, string, bigint] & { id: bigint; name: string; voteCount: bigint }
    ],
    "view"
  >;

  commitVote: TypedContractMethod<
    [_commitHash: BytesLike],
    [void],
    "nonpayable"
  >;

  commits: TypedContractMethod<
    [arg0: AddressLike],
    [
      [string, boolean, bigint] & {
        commitHash: string;
        revealed: boolean;
        candidateId: bigint;
      }
    ],
    "view"
  >;

  currentStage: TypedContractMethod<[], [bigint], "view">;

  generateCommitHash: TypedContractMethod<
    [_candidateId: BigNumberish, _secret: BigNumberish],
    [string],
    "view"
  >;

  getAllCandidates: TypedContractMethod<
    [],
    [CommitRevealElection.CandidateStructOutput[]],
    "view"
  >;

  getCandidate: TypedContractMethod<
    [_candidateId: BigNumberish],
    [[bigint, string, bigint]],
    "view"
  >;

  getElectionStats: TypedContractMethod<
    [],
    [[bigint, bigint, bigint, bigint, bigint]],
    "view"
  >;

  getVoterCommit: TypedContractMethod<
    [_voter: AddressLike],
    [[string, boolean, bigint]],
    "view"
  >;

  getWinner: TypedContractMethod<[], [[bigint, string, bigint]], "view">;

  hasVoterCommitted: TypedContractMethod<
    [_voter: AddressLike],
    [boolean],
    "view"
  >;

  hasVoterRevealed: TypedContractMethod<
    [_voter: AddressLike],
    [boolean],
    "view"
  >;

  isVoterRegistered: TypedContractMethod<
    [_voter: AddressLike],
    [boolean],
    "view"
  >;

  registerMultipleVoters: TypedContractMethod<
    [_voters: AddressLike[]],
    [void],
    "nonpayable"
  >;

  registerVoter: TypedContractMethod<
    [_voter: AddressLike],
    [void],
    "nonpayable"
  >;

  registeredVoters: TypedContractMethod<[arg0: AddressLike], [boolean], "view">;

  resetElection: TypedContractMethod<[], [void], "nonpayable">;

  revealVote: TypedContractMethod<
    [_candidateId: BigNumberish, _secret: BigNumberish],
    [void],
    "nonpayable"
  >;

  totalCommits: TypedContractMethod<[], [bigint], "view">;

  totalRevealed: TypedContractMethod<[], [bigint], "view">;

  voterCount: TypedContractMethod<[], [bigint], "view">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "addCandidate"
  ): TypedContractMethod<[_name: string], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "admin"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "advanceStage"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "candidateCount"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "candidates"
  ): TypedContractMethod<
    [arg0: BigNumberish],
    [
      [bigint, string, bigint] & { id: bigint; name: string; voteCount: bigint }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "commitVote"
  ): TypedContractMethod<[_commitHash: BytesLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "commits"
  ): TypedContractMethod<
    [arg0: AddressLike],
    [
      [string, boolean, bigint] & {
        commitHash: string;
        revealed: boolean;
        candidateId: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "currentStage"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "generateCommitHash"
  ): TypedContractMethod<
    [_candidateId: BigNumberish, _secret: BigNumberish],
    [string],
    "view"
  >;
  getFunction(
    nameOrSignature: "getAllCandidates"
  ): TypedContractMethod<
    [],
    [CommitRevealElection.CandidateStructOutput[]],
    "view"
  >;
  getFunction(
    nameOrSignature: "getCandidate"
  ): TypedContractMethod<
    [_candidateId: BigNumberish],
    [[bigint, string, bigint]],
    "view"
  >;
  getFunction(
    nameOrSignature: "getElectionStats"
  ): TypedContractMethod<
    [],
    [[bigint, bigint, bigint, bigint, bigint]],
    "view"
  >;
  getFunction(
    nameOrSignature: "getVoterCommit"
  ): TypedContractMethod<
    [_voter: AddressLike],
    [[string, boolean, bigint]],
    "view"
  >;
  getFunction(
    nameOrSignature: "getWinner"
  ): TypedContractMethod<[], [[bigint, string, bigint]], "view">;
  getFunction(
    nameOrSignature: "hasVoterCommitted"
  ): TypedContractMethod<[_voter: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "hasVoterRevealed"
  ): TypedContractMethod<[_voter: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "isVoterRegistered"
  ): TypedContractMethod<[_voter: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "registerMultipleVoters"
  ): TypedContractMethod<[_voters: AddressLike[]], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "registerVoter"
  ): TypedContractMethod<[_voter: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "registeredVoters"
  ): TypedContractMethod<[arg0: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "resetElection"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "revealVote"
  ): TypedContractMethod<
    [_candidateId: BigNumberish, _secret: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "totalCommits"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "totalRevealed"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "voterCount"
  ): TypedContractMethod<[], [bigint], "view">;

  getEvent(
    key: "CandidateAdded"
  ): TypedContractEvent<
    CandidateAddedEvent.InputTuple,
    CandidateAddedEvent.OutputTuple,
    CandidateAddedEvent.OutputObject
  >;
  getEvent(
    key: "StageChanged"
  ): TypedContractEvent<
    StageChangedEvent.InputTuple,
    StageChangedEvent.OutputTuple,
    StageChangedEvent.OutputObject
  >;
  getEvent(
    key: "VoteCommitted"
  ): TypedContractEvent<
    VoteCommittedEvent.InputTuple,
    VoteCommittedEvent.OutputTuple,
    VoteCommittedEvent.OutputObject
  >;
  getEvent(
    key: "VoteRevealed"
  ): TypedContractEvent<
    VoteRevealedEvent.InputTuple,
    VoteRevealedEvent.OutputTuple,
    VoteRevealedEvent.OutputObject
  >;
  getEvent(
    key: "VoterRegistered"
  ): TypedContractEvent<
    VoterRegisteredEvent.InputTuple,
    VoterRegisteredEvent.OutputTuple,
    VoterRegisteredEvent.OutputObject
  >;

  filters: {
    "CandidateAdded(uint256,string)": TypedContractEvent<
      CandidateAddedEvent.InputTuple,
      CandidateAddedEvent.OutputTuple,
      CandidateAddedEvent.OutputObject
    >;
    CandidateAdded: TypedContractEvent<
      CandidateAddedEvent.InputTuple,
      CandidateAddedEvent.OutputTuple,
      CandidateAddedEvent.OutputObject
    >;

    "StageChanged(uint8)": TypedContractEvent<
      StageChangedEvent.InputTuple,
      StageChangedEvent.OutputTuple,
      StageChangedEvent.OutputObject
    >;
    StageChanged: TypedContractEvent<
      StageChangedEvent.InputTuple,
      StageChangedEvent.OutputTuple,
      StageChangedEvent.OutputObject
    >;

    "VoteCommitted(address,bytes32)": TypedContractEvent<
      VoteCommittedEvent.InputTuple,
      VoteCommittedEvent.OutputTuple,
      VoteCommittedEvent.OutputObject
    >;
    VoteCommitted: TypedContractEvent<
      VoteCommittedEvent.InputTuple,
      VoteCommittedEvent.OutputTuple,
      VoteCommittedEvent.OutputObject
    >;

    "VoteRevealed(address,uint256)": TypedContractEvent<
      VoteRevealedEvent.InputTuple,
      VoteRevealedEvent.OutputTuple,
      VoteRevealedEvent.OutputObject
    >;
    VoteRevealed: TypedContractEvent<
      VoteRevealedEvent.InputTuple,
      VoteRevealedEvent.OutputTuple,
      VoteRevealedEvent.OutputObject
    >;

    "VoterRegistered(address)": TypedContractEvent<
      VoterRegisteredEvent.InputTuple,
      VoterRegisteredEvent.OutputTuple,
      VoterRegisteredEvent.OutputObject
    >;
    VoterRegistered: TypedContractEvent<
      VoterRegisteredEvent.InputTuple,
      VoterRegisteredEvent.OutputTuple,
      VoterRegisteredEvent.OutputObject
    >;
  };
}
